.grid(){
  display: grid;
  display: -ms-grid;
}

.inlineGrid(){
  display: inline-grid;
  display: -ms-inline-grid;
}

.gridTemplateColumn(@a){
  grid-template-columns: @a;
  -ms-grid-columns: @a;
}

.gridTemplateColumnAutoFit(@a){
  .gridTemplateColumn(repeat(auto-fit, @a));
}

.gridColumn(@x : 1, @y : 1){
  grid-column: ~'@{x} / @{y}';
  -ms-grid-column: ~'@{x} / @{y}';
}

.gridRow(@x : 1, @y : 1){
  grid-row: ~'@{x} / @{y}';
  -ms-grid-row: ~'@{x} / @{y}';
}

.gridRowReset(){
  grid-row: initial;
  -ms-grid-row: initial;
}

.gridColumnReset(){
  grid-column: initial;
  -ms-grid-column: initial;
}

.gridTemplateRow(@a){
  grid-template-rows: @a;
  -ms-grid-rows: @a;
}

.gridTemplateRowAutoFit(@a){
  .gridTemplateRow(repeat(auto-fit, @a));
}

//noinspection CssOverwrittenProperties
//noinspection CssUnknownProperty
.gridColumnGap(@px: 0){
  grid-column-gap: @px;
  -ms-grid-column-gap: @px;
}

//noinspection CssOverwrittenProperties
//noinspection CssUnknownProperty
.gridRowGap(@px: 0){
  grid-row-gap: @px;
  -ms-grid-row-gap: @px;
}

//noinspection CssOverwrittenProperties
//noinspection CssUnknownProperty
.gridColumnSetup(@repeat: 1, @gap: 0){

  .gridTemplateColumn(repeat(@repeat, ~'calc(' (round(100% / @repeat, 2)) ~' - ((@{gap} * '(@repeat - 1)~') / @{repeat}))'));

  // gap count = item repeatation - 1;
  //@count: @repeat - 1;
  //
  //@gap-count: @gap * @count;
  //
  //@gap-div-repeat: @gap-count / @repeat;
  //@round2: round(@gap-div-repeat, 2);
  //
  //@template: if(ispercentage(@round2), repeat(@repeat, round((100% / @repeat), 2) - @round2) ,repeat(@repeat, ~'calc(' round((100% / @repeat), 2) ~' - @{round2})'));
  //
  //.gridTemplateColumn(@template);
  .gridColumnGap(@gap);
}